name: Custom Build Pacman

on:
  workflow_dispatch:
    inputs:
      build_type:
        description: 'Build type'
        required: true
        default: 'release'
        type: choice
        options:
        - debug
        - release
      create_package:
        description: 'Create downloadable package'
        required: false
        default: true
        type: boolean

env:
  MAKEFLAGS: "-j4"
  VERBOSE: 1

jobs:
  custom-build:
    name: Custom Build on macOS
    runs-on: macos-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install dependencies
      run: |
        brew update
        brew install meson ninja pkg-config libarchive curl gpgme openssl@3 nettle python@3.11 bash gettext
        
        # Build comprehensive PKG_CONFIG_PATH
        export PKG_CONFIG_PATH=""
        PKG_CONFIG_PATH="$(brew --prefix openssl@3)/lib/pkgconfig:$PKG_CONFIG_PATH"
        PKG_CONFIG_PATH="$(brew --prefix gettext)/lib/pkgconfig:$PKG_CONFIG_PATH"
        PKG_CONFIG_PATH="$(brew --prefix libarchive)/lib/pkgconfig:$PKG_CONFIG_PATH"
        PKG_CONFIG_PATH="$(brew --prefix gpgme)/lib/pkgconfig:$PKG_CONFIG_PATH"
        PKG_CONFIG_PATH="$(brew --prefix curl)/lib/pkgconfig:$PKG_CONFIG_PATH"
        echo "PKG_CONFIG_PATH=$PKG_CONFIG_PATH" >> $GITHUB_ENV
        
        # Build comprehensive LDFLAGS
        LDFLAGS=""
        LDFLAGS="-L$(brew --prefix openssl@3)/lib $LDFLAGS"
        LDFLAGS="-L$(brew --prefix gettext)/lib $LDFLAGS"
        LDFLAGS="-L$(brew --prefix libarchive)/lib $LDFLAGS"
        LDFLAGS="-L$(brew --prefix gpgme)/lib $LDFLAGS"
        LDFLAGS="-L$(brew --prefix curl)/lib $LDFLAGS"
        LDFLAGS="-lintl $LDFLAGS"
        echo "LDFLAGS=$LDFLAGS" >> $GITHUB_ENV
        
        # Build comprehensive CPPFLAGS
        CPPFLAGS=""
        CPPFLAGS="-I$(brew --prefix openssl@3)/include $CPPFLAGS"
        CPPFLAGS="-I$(brew --prefix gettext)/include $CPPFLAGS"
        CPPFLAGS="-I$(brew --prefix libarchive)/include $CPPFLAGS"
        CPPFLAGS="-I$(brew --prefix gpgme)/include $CPPFLAGS"
        CPPFLAGS="-I$(brew --prefix curl)/include $CPPFLAGS"
        echo "CPPFLAGS=$CPPFLAGS" >> $GITHUB_ENV
        
        # Ensure Homebrew bash is used
        echo "PATH=$(brew --prefix)/bin:$PATH" >> $GITHUB_ENV

    - name: Setup build
      run: meson setup --buildtype=${{ github.event.inputs.build_type }} build

    - name: Build
      run: ninja -C build

    - name: Create package
      if: ${{ github.event.inputs.create_package == 'true' }}
      run: |
        mkdir -p pkg/usr/local/bin
        mkdir -p pkg/usr/local/lib
        
        # Copy binaries
        cp build/pacman pkg/usr/local/bin/
        cp build/pacman-conf pkg/usr/local/bin/
        cp build/testpkg pkg/usr/local/bin/
        cp build/vercmp pkg/usr/local/bin/
        
        # Copy libraries
        cp build/libalpm.* pkg/usr/local/lib/ || true
        
        # Create package info
        echo "Pacman $(date +%Y%m%d) for macOS" > pkg/PACKAGE_INFO
        echo "Built on: $(date)" >> pkg/PACKAGE_INFO
        echo "Build type: ${{ github.event.inputs.build_type }}" >> pkg/PACKAGE_INFO
        echo "Architecture: $(uname -m)" >> pkg/PACKAGE_INFO
        
        # Create tarball
        cd pkg
        tar -czf ../pacman-macos-${{ github.event.inputs.build_type }}-$(date +%Y%m%d).tar.gz .

    - name: Upload package
      if: ${{ github.event.inputs.create_package == 'true' }}
      uses: actions/upload-artifact@v4
      with:
        name: pacman-macos-${{ github.event.inputs.build_type }}-package
        path: pacman-macos-*.tar.gz

    - name: Upload binaries only
      if: ${{ github.event.inputs.create_package == 'false' }}
      uses: actions/upload-artifact@v4
      with:
        name: pacman-macos-${{ github.event.inputs.build_type }}-binaries
        path: |
          build/pacman
          build/pacman-conf
          build/testpkg
          build/vercmp
          build/libalpm.*
