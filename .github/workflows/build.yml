name: Build Pacman

on:
  push:
    branches: [ main, master, develop ]
  pull_request:
    branches: [ main, master, develop ]
  workflow_dispatch:

env:
  MAKEFLAGS: "-j4"
  VERBOSE: 1

jobs:
  build-arch:
    name: Build on Arch Linux
    runs-on: ubuntu-latest
    container: archlinux:base-devel
    strategy:
      matrix:
        config:
          - name: "Standard"
            setup_args: ""
          - name: "Debug"
            setup_args: "--buildtype=debug --werror"
          - name: "With Clang"
            setup_args: ""
            compiler: "clang"
          - name: "Nettle Crypto"
            setup_args: "-Dcrypto=nettle --buildtype=debug"
          - name: "No GPG"
            setup_args: "-Dgpgme=disabled --buildtype=debug"
          - name: "No cURL"
            setup_args: "-Dcurl=disabled --buildtype=debug"
          - name: "No i18n"
            setup_args: "-Di18n=false --buildtype=debug"

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install dependencies
      run: |
        pacman -Syu --needed --noconfirm \
          git \
          gpgme libarchive curl \
          python \
          fakeroot fakechroot \
          meson \
          nettle

    - name: Install Clang (if needed)
      if: matrix.config.compiler == 'clang'
      run: pacman -Syu --needed --noconfirm clang

    - name: Setup build
      run: |
        if [ "${{ matrix.config.compiler }}" = "clang" ]; then
          export CC=clang
        fi
        meson setup ${{ matrix.config.setup_args }} build

    - name: Build
      run: ninja -C build

    - name: Test
      run: fakechroot meson test -C build

    - name: Upload test logs
      if: failure()
      uses: actions/upload-artifact@v4
      with:
        name: test-logs-arch-${{ matrix.config.name }}
        path: build/meson-logs/

  build-docs:
    name: Build Documentation
    runs-on: ubuntu-latest
    container: archlinux:base-devel
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install dependencies
      run: |
        pacman -Syu --needed --noconfirm \
          git \
          gpgme libarchive curl \
          python \
          meson \
          asciidoc

    - name: Setup build
      run: meson setup -Ddoc=enabled build

    - name: Build docs
      run: ninja -C build

    - name: Upload documentation
      uses: actions/upload-artifact@v4
      with:
        name: documentation
        path: build/doc/

  build-debian:
    name: Build on Debian
    runs-on: ubuntu-latest
    container: debian:bookworm
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install dependencies
      run: |
        apt update
        apt -y install --no-install-recommends \
          git pkg-config meson gcc libtool \
          libgpgme-dev libarchive-dev libcurl4-openssl-dev libssl-dev curl \
          gettext python3 python3-setuptools dash gawk ca-certificates \
          fakeroot fakechroot

    - name: Setup build
      run: meson setup --buildtype=debug build

    - name: Build
      run: ninja -C build

    - name: Test
      run: fakechroot meson test -C build

    - name: Upload test logs
      if: failure()
      uses: actions/upload-artifact@v4
      with:
        name: test-logs-debian
        path: build/meson-logs/

  build-fedora:
    name: Build on Fedora
    runs-on: ubuntu-latest
    container: fedora:latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install dependencies
      run: |
        dnf -y install \
          git findutils patch sed \
          meson gcc libtool bsdtar \
          gpgme-devel libarchive-devel libcurl-devel openssl-devel gettext-devel \
          asciidoc python3 dash gawk \
          fakeroot fakechroot \
          perl-Module-Load-Conditional

    - name: Setup build
      run: meson setup --buildtype=debug build

    - name: Build
      run: ninja -C build

    - name: Test
      run: fakechroot meson test -C build

    - name: Upload test logs
      if: failure()
      uses: actions/upload-artifact@v4
      with:
        name: test-logs-fedora
        path: build/meson-logs/

  build-ubuntu:
    name: Build on Ubuntu (Host)
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          git pkg-config meson gcc libtool \
          libgpgme-dev libarchive-dev libcurl4-openssl-dev libssl-dev \
          gettext python3 python3-setuptools dash gawk \
          fakeroot fakechroot \
          asciidoc

    - name: Setup build
      run: meson setup --buildtype=debug build

    - name: Build
      run: ninja -C build

    - name: Test
      run: fakechroot meson test -C build

    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: pacman-ubuntu-build
        path: |
          build/pacman
          build/pacman-conf
          build/testpkg
          build/vercmp
          build/libalpm.*

    - name: Upload test logs
      if: failure()
      uses: actions/upload-artifact@v4
      with:
        name: test-logs-ubuntu
        path: build/meson-logs/

  build-macos:
    name: Build on macOS
    runs-on: macos-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install dependencies
      run: |
        brew update
        brew install meson ninja pkg-config libarchive curl gpgme openssl@3 nettle python@3.11 bash
        
        # Set up environment for OpenSSL
        echo "PKG_CONFIG_PATH=$(brew --prefix openssl@3)/lib/pkgconfig:$PKG_CONFIG_PATH" >> $GITHUB_ENV
        echo "LDFLAGS=-L$(brew --prefix openssl@3)/lib" >> $GITHUB_ENV
        echo "CPPFLAGS=-I$(brew --prefix openssl@3)/include" >> $GITHUB_ENV
        
        # Ensure Homebrew bash is used
        echo "PATH=$(brew --prefix)/bin:$PATH" >> $GITHUB_ENV

    - name: Verify bash version
      run: |
        echo "System bash: $(/bin/bash --version | head -1)"
        echo "Homebrew bash: $($(brew --prefix)/bin/bash --version | head -1)"
        echo "Current bash in PATH: $(bash --version | head -1)"
        
        # Verify we have bash >= 4.4.0
        BASH_VERSION=$(bash --version | head -1 | sed 's/.*version \([0-9]*\.[0-9]*\).*/\1/')
        echo "Detected bash version: $BASH_VERSION"

    - name: Setup build
      run: meson setup --buildtype=debug build

    - name: Build
      run: ninja -C build

    - name: Test
      run: meson test -C build

    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: pacman-macos-build
        path: |
          build/pacman
          build/pacman-conf
          build/testpkg
          build/vercmp
          build/libalpm.*

    - name: Upload test logs
      if: failure()
      uses: actions/upload-artifact@v4
      with:
        name: test-logs-macos
        path: build/meson-logs/

  create-release:
    name: Create Release Package
    runs-on: ubuntu-latest
    needs: [build-arch, build-ubuntu, build-macos]
    if: github.ref == 'refs/heads/master' || github.ref == 'refs/heads/main'
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Download Ubuntu artifacts
      uses: actions/download-artifact@v4
      with:
        name: pacman-ubuntu-build
        path: artifacts/

    - name: Create release tarball
      run: |
        mkdir -p release/pacman-$(date +%Y%m%d)/bin
        cp artifacts/* release/pacman-$(date +%Y%m%d)/bin/ || true
        cd release
        tar -czf pacman-$(date +%Y%m%d).tar.gz pacman-$(date +%Y%m%d)/

    - name: Upload release
      uses: actions/upload-artifact@v4
      with:
        name: pacman-release
        path: release/*.tar.gz
