name: Package Build

on:
  workflow_dispatch:
    inputs:
      package_version:
        description: 'Package version'
        required: false
        default: 'auto'
      create_deb:
        description: 'Create DEB package'
        type: boolean
        default: true
      create_rpm:
        description: 'Create RPM package'
        type: boolean
        default: true
      create_tarball:
        description: 'Create tarball'
        type: boolean
        default: true
      create_macos:
        description: 'Create macOS package'
        type: boolean
        default: false

jobs:
  build-deb:
    name: Build DEB Package
    runs-on: ubuntu-latest
    container: debian:bookworm
    if: ${{ github.event.inputs.create_deb == 'true' }}
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install build dependencies
      run: |
        apt update
        apt -y install --no-install-recommends \
          git pkg-config meson gcc libtool \
          libgpgme-dev libarchive-dev libcurl4-openssl-dev libssl-dev \
          gettext python3 python3-setuptools dash gawk ca-certificates \
          fakeroot fakechroot build-essential debhelper dh-make

    - name: Setup version
      run: |
        if [ "${{ github.event.inputs.package_version }}" = "auto" ]; then
          VERSION=$(grep "version :" meson.build | sed "s/.*version : '\(.*\)'.*/\1/")
        else
          VERSION="${{ github.event.inputs.package_version }}"
        fi
        echo "PACKAGE_VERSION=$VERSION" >> $GITHUB_ENV

    - name: Create DEB package structure
      run: |
        mkdir -p debian-package/DEBIAN
        cat > debian-package/DEBIAN/control << EOF
        Package: pacman
        Version: $PACKAGE_VERSION
        Section: utils
        Priority: optional
        Architecture: amd64
        Depends: libarchive13, libcurl4, libgpgme11, libssl3
        Maintainer: Pacman Development Team <pacman-dev@archlinux.org>
        Description: A library-based package manager with dependency support
         Pacman is a utility which manages software packages in Linux.
         It uses simple compressed files as a package format, and maintains a
         text-based package database (more of a hierarchy), just in case some
         hand tweaking is necessary.
        EOF

    - name: Build and install to package
      run: |
        meson setup --prefix=/usr build
        ninja -C build
        DESTDIR=$PWD/debian-package ninja -C build install

    - name: Build DEB package
      run: |
        dpkg-deb --build debian-package pacman_$PACKAGE_VERSION_amd64.deb

    - name: Upload DEB package
      uses: actions/upload-artifact@v4
      with:
        name: pacman-deb
        path: "*.deb"

  build-rpm:
    name: Build RPM Package
    runs-on: ubuntu-latest
    container: fedora:latest
    if: ${{ github.event.inputs.create_rpm == 'true' }}
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install build dependencies
      run: |
        dnf -y install \
          git findutils patch sed \
          meson gcc libtool bsdtar \
          gpgme-devel libarchive-devel libcurl-devel openssl-devel gettext-devel \
          asciidoc python3 dash gawk \
          rpm-build rpmdevtools

    - name: Setup version
      run: |
        if [ "${{ github.event.inputs.package_version }}" = "auto" ]; then
          VERSION=$(grep "version :" meson.build | sed "s/.*version : '\(.*\)'.*/\1/")
        else
          VERSION="${{ github.event.inputs.package_version }}"
        fi
        echo "PACKAGE_VERSION=$VERSION" >> $GITHUB_ENV

    - name: Create RPM spec file
      run: |
        mkdir -p ~/rpmbuild/{SOURCES,SPECS,BUILD,RPMS,SRPMS}
        cat > ~/rpmbuild/SPECS/pacman.spec << EOF
        Name:           pacman
        Version:        $PACKAGE_VERSION
        Release:        1%{?dist}
        Summary:        A library-based package manager with dependency support
        
        License:        GPL-2.0+
        URL:            https://www.archlinux.org/pacman/
        Source0:        %{name}-%{version}.tar.gz
        
        BuildRequires:  meson gcc libtool
        BuildRequires:  gpgme-devel libarchive-devel libcurl-devel openssl-devel
        BuildRequires:  gettext-devel python3
        Requires:       libarchive libcurl gpgme openssl-libs
        
        %description
        Pacman is a utility which manages software packages in Linux.
        It uses simple compressed files as a package format, and maintains a
        text-based package database, just in case some hand tweaking is necessary.
        
        %prep
        %setup -q
        
        %build
        meson setup --prefix=%{_prefix} build
        ninja -C build
        
        %install
        DESTDIR=%{buildroot} ninja -C build install
        
        %files
        %{_bindir}/*
        %{_libdir}/*
        %{_includedir}/*
        %{_datadir}/*
        %config(noreplace) %{_sysconfdir}/*
        
        %changelog
        * $(date "+%a %b %d %Y") GitHub Actions <noreply@github.com> - $PACKAGE_VERSION-1
        - Automated build from GitHub Actions
        EOF

    - name: Create source tarball
      run: |
        tar --exclude='.git' --exclude='.github' -czf ~/rpmbuild/SOURCES/pacman-$PACKAGE_VERSION.tar.gz .

    - name: Build RPM
      run: |
        cd ~/rpmbuild/SPECS
        rpmbuild -ba pacman.spec

    - name: Upload RPM package
      uses: actions/upload-artifact@v4
      with:
        name: pacman-rpm
        path: "~/rpmbuild/RPMS/x86_64/*.rpm"

  build-tarball:
    name: Build Source Tarball
    runs-on: ubuntu-latest
    if: ${{ github.event.inputs.create_tarball == 'true' }}
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup version
      run: |
        if [ "${{ github.event.inputs.package_version }}" = "auto" ]; then
          VERSION=$(grep "version :" meson.build | sed "s/.*version : '\(.*\)'.*/\1/")
        else
          VERSION="${{ github.event.inputs.package_version }}"
        fi
        echo "PACKAGE_VERSION=$VERSION" >> $GITHUB_ENV

    - name: Create source tarball
      run: |
        mkdir -p release
        tar --exclude='.git' --exclude='.github' \
            --exclude='build' --exclude='*.tar.gz' \
            -czf release/pacman-$PACKAGE_VERSION-source.tar.gz .

    - name: Upload source tarball
      uses: actions/upload-artifact@v4
      with:
        name: pacman-source
        path: "release/*.tar.gz"

  build-macos:
    name: Build macOS Package
    runs-on: macos-latest
    if: ${{ github.event.inputs.create_macos == 'true' }}
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install build dependencies
      run: |
        brew update
        brew install meson ninja pkg-config libarchive curl gpgme openssl@3 nettle python@3.11 bash gettext
        
        # Set up environment for OpenSSL
        echo "PKG_CONFIG_PATH=$(brew --prefix openssl@3)/lib/pkgconfig:$PKG_CONFIG_PATH" >> $GITHUB_ENV
        echo "LDFLAGS=-L$(brew --prefix openssl@3)/lib" >> $GITHUB_ENV
        echo "CPPFLAGS=-I$(brew --prefix openssl@3)/include" >> $GITHUB_ENV
        
        # Set up environment for gettext (libintl)
        echo "PKG_CONFIG_PATH=$(brew --prefix gettext)/lib/pkgconfig:$PKG_CONFIG_PATH" >> $GITHUB_ENV
        echo "LDFLAGS=-L$(brew --prefix gettext)/lib $LDFLAGS" >> $GITHUB_ENV
        echo "CPPFLAGS=-I$(brew --prefix gettext)/include $CPPFLAGS" >> $GITHUB_ENV
        
        # Ensure Homebrew bash is used
        echo "PATH=$(brew --prefix)/bin:$PATH" >> $GITHUB_ENV

    - name: Verify bash version
      run: |
        echo "System bash: $(/bin/bash --version | head -1)"
        echo "Homebrew bash: $($(brew --prefix)/bin/bash --version | head -1)"
        echo "Current bash in PATH: $(bash --version | head -1)"
        
        # Verify we have bash >= 4.4.0
        BASH_VERSION=$(bash --version | head -1 | sed 's/.*version \([0-9]*\.[0-9]*\).*/\1/')
        echo "Detected bash version: $BASH_VERSION"

    - name: Setup version
      run: |
        if [ "${{ github.event.inputs.package_version }}" = "auto" ]; then
          VERSION=$(grep "version :" meson.build | sed "s/.*version : '\(.*\)'.*/\1/")
        else
          VERSION="${{ github.event.inputs.package_version }}"
        fi
        echo "PACKAGE_VERSION=$VERSION" >> $GITHUB_ENV

    - name: Build and install to package
      run: |
        meson setup --prefix=/usr/local build
        ninja -C build
        mkdir -p macos-package
        DESTDIR=$PWD/macos-package ninja -C build install

    - name: Create macOS installer package
      run: |
        # Create package structure
        mkdir -p package-root/usr/local
        cp -R macos-package/usr/local/* package-root/usr/local/
        
        # Create package info
        mkdir -p package-scripts
        cat > package-scripts/postinstall << 'EOF'
        #!/bin/bash
        # Add /usr/local/bin to PATH if not already there
        if ! echo "$PATH" | grep -q "/usr/local/bin"; then
          echo 'export PATH="/usr/local/bin:$PATH"' >> ~/.zshrc
          echo 'export PATH="/usr/local/bin:$PATH"' >> ~/.bash_profile
        fi
        EOF
        chmod +x package-scripts/postinstall
        
        # Build the package
        pkgbuild --root package-root \
                 --scripts package-scripts \
                 --identifier org.archlinux.pacman \
                 --version $PACKAGE_VERSION \
                 --install-location / \
                 pacman-$PACKAGE_VERSION-macos.pkg

    - name: Create Homebrew formula
      run: |
        cat > pacman.rb << EOF
        class Pacman < Formula
          desc "A library-based package manager with dependency support"
          homepage "https://www.archlinux.org/pacman/"
          version "$PACKAGE_VERSION"
          
          depends_on "libarchive"
          depends_on "curl" 
          depends_on "gpgme"
          depends_on "openssl@3"
          depends_on "bash"
          depends_on "gettext"
          depends_on "meson" => :build
          depends_on "ninja" => :build
          depends_on "pkg-config" => :build
          
          def install
            # Ensure we use Homebrew bash and gettext
            ENV.prepend_path "PATH", Formula["bash"].opt_bin
            ENV.prepend_path "PKG_CONFIG_PATH", Formula["gettext"].opt_lib/"pkgconfig"
            ENV.prepend_path "PKG_CONFIG_PATH", Formula["openssl@3"].opt_lib/"pkgconfig"
            
            system "meson", "setup", "--prefix=#{prefix}", "build"
            system "ninja", "-C", "build"
            system "ninja", "-C", "build", "install"
          end
          
          test do
            system "#{bin}/pacman", "--version"
          end
        end
        EOF

    - name: Upload macOS packages
      uses: actions/upload-artifact@v4
      with:
        name: pacman-macos
        path: |
          *.pkg
          pacman.rb

  create-release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: [build-deb, build-rpm, build-tarball, build-macos]
    if: always() && (needs.build-deb.result == 'success' || needs.build-rpm.result == 'success' || needs.build-tarball.result == 'success' || needs.build-macos.result == 'success')
    steps:
    - name: Setup version
      run: |
        if [ "${{ github.event.inputs.package_version }}" = "auto" ]; then
          VERSION="auto-$(date +%Y%m%d-%H%M%S)"
        else
          VERSION="${{ github.event.inputs.package_version }}"
        fi
        echo "RELEASE_VERSION=$VERSION" >> $GITHUB_ENV

    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        path: artifacts/

    - name: Create Release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: v${{ env.RELEASE_VERSION }}
        name: "Pacman ${{ env.RELEASE_VERSION }}"
        draft: false
        prerelease: true
        files: |
          artifacts/**/*
        body: |
          ## Pacman Build ${{ env.RELEASE_VERSION }}
          
          Automated build of Pacman package manager.
          
          ### Packages
          - **DEB**: For Debian/Ubuntu systems
          - **RPM**: For Fedora/RHEL systems  
          - **PKG**: For macOS systems
          - **Source**: Source code tarball
          
          ### Installation
          
          **Debian/Ubuntu:**
          ```bash
          sudo dpkg -i pacman_*.deb
          sudo apt-get install -f  # Fix dependencies if needed
          ```
          
          **Fedora/RHEL:**
          ```bash
          sudo dnf install pacman-*.rpm
          ```
          
          **macOS:**
          ```bash
          # Option 1: Install .pkg file
          sudo installer -pkg pacman-*-macos.pkg -target /
          
          # Option 2: Install via Homebrew (copy pacman.rb to your tap)
          brew install --build-from-source ./pacman.rb
          ```
          
          **From Source:**
          ```bash
          tar -xzf pacman-*-source.tar.gz
          cd pacman-*
          meson setup build
          ninja -C build
          sudo ninja -C build install
          ```
