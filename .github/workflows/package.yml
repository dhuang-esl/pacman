name: Package Build

on:
  workflow_dispatch:
    inputs:
      package_version:
        description: 'Package version'
        required: false
        default: 'auto'
      create_deb:
        description: 'Create DEB package (Ubuntu)'
        type: boolean
        default: true
      create_macos:
        description: 'Create macOS package'
        type: boolean
        default: true
      create_tarball:
        description: 'Create tarball'
        type: boolean
        default: true

jobs:
  build-deb:
    name: Build DEB Package (Ubuntu)
    runs-on: ubuntu-latest
    if: ${{ github.event.inputs.create_deb == 'true' }}
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install build dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          git pkg-config meson gcc libtool \
          libgpgme-dev libarchive-dev libcurl4-openssl-dev libssl-dev \
          gettext python3 python3-setuptools dash gawk ca-certificates \
          fakeroot fakechroot build-essential debhelper dh-make

    - name: Setup version
      run: |
        if [ "${{ github.event.inputs.package_version }}" = "auto" ]; then
          VERSION=$(grep "version :" meson.build | sed "s/.*version : '\(.*\)'.*/\1/")
        else
          VERSION="${{ github.event.inputs.package_version }}"
        fi
        echo "PACKAGE_VERSION=$VERSION" >> $GITHUB_ENV

    - name: Create DEB package structure
      run: |
        mkdir -p debian-package/DEBIAN
        cat > debian-package/DEBIAN/control << EOF
        Package: pacman
        Version: $PACKAGE_VERSION
        Section: utils
        Priority: optional
        Architecture: amd64
        Depends: libarchive13, libcurl4, libgpgme11, libssl3
        Maintainer: Pacman Development Team <pacman-dev@archlinux.org>
        Description: A library-based package manager with dependency support
         Pacman is a utility which manages software packages in Linux.
         It uses simple compressed files as a package format, and maintains a
         text-based package database (more of a hierarchy), just in case some
         hand tweaking is necessary.
        EOF

    - name: Build and install to package
      run: |
        meson setup --prefix=/usr build
        ninja -C build
        DESTDIR=$PWD/debian-package ninja -C build install

    - name: Build DEB package
      run: |
        dpkg-deb --build debian-package pacman_$PACKAGE_VERSION_amd64.deb

    - name: Upload DEB package
      uses: actions/upload-artifact@v4
      with:
        name: pacman-deb
        path: "*.deb"

  build-tarball:
    name: Build Source Tarball
    runs-on: ubuntu-latest
    if: ${{ github.event.inputs.create_tarball == 'true' }}
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup version
      run: |
        if [ "${{ github.event.inputs.package_version }}" = "auto" ]; then
          VERSION=$(grep "version :" meson.build | sed "s/.*version : '\(.*\)'.*/\1/")
        else
          VERSION="${{ github.event.inputs.package_version }}"
        fi
        echo "PACKAGE_VERSION=$VERSION" >> $GITHUB_ENV

    - name: Create source tarball
      run: |
        mkdir -p release
        tar --exclude='.git' --exclude='.github' \
            --exclude='build' --exclude='*.tar.gz' \
            -czf release/pacman-$PACKAGE_VERSION-source.tar.gz .

    - name: Upload source tarball
      uses: actions/upload-artifact@v4
      with:
        name: pacman-source
        path: "release/*.tar.gz"

  build-macos:
    name: Build macOS Package
    runs-on: macos-latest
    if: ${{ github.event.inputs.create_macos == 'true' }}
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install build dependencies
      run: |
        brew update
        brew install meson ninja pkg-config libarchive curl gpgme openssl@3 nettle python@3.11 bash gettext
        
        # Build comprehensive PKG_CONFIG_PATH
        export PKG_CONFIG_PATH=""
        PKG_CONFIG_PATH="$(brew --prefix openssl@3)/lib/pkgconfig:$PKG_CONFIG_PATH"
        PKG_CONFIG_PATH="$(brew --prefix gettext)/lib/pkgconfig:$PKG_CONFIG_PATH"
        PKG_CONFIG_PATH="$(brew --prefix libarchive)/lib/pkgconfig:$PKG_CONFIG_PATH"
        PKG_CONFIG_PATH="$(brew --prefix gpgme)/lib/pkgconfig:$PKG_CONFIG_PATH"
        PKG_CONFIG_PATH="$(brew --prefix curl)/lib/pkgconfig:$PKG_CONFIG_PATH"
        echo "PKG_CONFIG_PATH=$PKG_CONFIG_PATH" >> $GITHUB_ENV
        
        # Build comprehensive LDFLAGS
        LDFLAGS=""
        LDFLAGS="-L$(brew --prefix openssl@3)/lib $LDFLAGS"
        LDFLAGS="-L$(brew --prefix gettext)/lib $LDFLAGS"
        LDFLAGS="-L$(brew --prefix libarchive)/lib $LDFLAGS"
        LDFLAGS="-L$(brew --prefix gpgme)/lib $LDFLAGS"
        LDFLAGS="-L$(brew --prefix curl)/lib $LDFLAGS"
        LDFLAGS="-lintl $LDFLAGS"
        echo "LDFLAGS=$LDFLAGS" >> $GITHUB_ENV
        
        # Build comprehensive CPPFLAGS
        CPPFLAGS=""
        CPPFLAGS="-I$(brew --prefix openssl@3)/include $CPPFLAGS"
        CPPFLAGS="-I$(brew --prefix gettext)/include $CPPFLAGS"
        CPPFLAGS="-I$(brew --prefix libarchive)/include $CPPFLAGS"
        CPPFLAGS="-I$(brew --prefix gpgme)/include $CPPFLAGS"
        CPPFLAGS="-I$(brew --prefix curl)/include $CPPFLAGS"
        echo "CPPFLAGS=$CPPFLAGS" >> $GITHUB_ENV
        
        # Ensure Homebrew bash is used
        echo "PATH=$(brew --prefix)/bin:$PATH" >> $GITHUB_ENV

    - name: Verify bash version
      run: |
        echo "System bash: $(/bin/bash --version | head -1)"
        echo "Homebrew bash: $($(brew --prefix)/bin/bash --version | head -1)"
        echo "Current bash in PATH: $(bash --version | head -1)"
        
        # Verify we have bash >= 4.4.0
        BASH_VERSION=$(bash --version | head -1 | sed 's/.*version \([0-9]*\.[0-9]*\).*/\1/')
        echo "Detected bash version: $BASH_VERSION"

    - name: Setup version
      run: |
        if [ "${{ github.event.inputs.package_version }}" = "auto" ]; then
          VERSION=$(grep "version :" meson.build | sed "s/.*version : '\(.*\)'.*/\1/")
        else
          VERSION="${{ github.event.inputs.package_version }}"
        fi
        echo "PACKAGE_VERSION=$VERSION" >> $GITHUB_ENV

    - name: Build and install to package
      run: |
        meson setup --prefix=/usr/local build
        ninja -C build
        mkdir -p macos-package
        DESTDIR=$PWD/macos-package ninja -C build install

    - name: Create macOS installer package
      run: |
        # Create package structure
        mkdir -p package-root/usr/local
        cp -R macos-package/usr/local/* package-root/usr/local/
        
        # Create package info
        mkdir -p package-scripts
        cat > package-scripts/postinstall << 'EOF'
        #!/bin/bash
        # Add /usr/local/bin to PATH if not already there
        if ! echo "$PATH" | grep -q "/usr/local/bin"; then
          echo 'export PATH="/usr/local/bin:$PATH"' >> ~/.zshrc
          echo 'export PATH="/usr/local/bin:$PATH"' >> ~/.bash_profile
        fi
        EOF
        chmod +x package-scripts/postinstall
        
        # Build the package
        pkgbuild --root package-root \
                 --scripts package-scripts \
                 --identifier org.archlinux.pacman \
                 --version $PACKAGE_VERSION \
                 --install-location / \
                 pacman-$PACKAGE_VERSION-macos.pkg

    - name: Create Homebrew formula
      run: |
        cat > pacman.rb << EOF
        class Pacman < Formula
          desc "A library-based package manager with dependency support"
          homepage "https://www.archlinux.org/pacman/"
          version "$PACKAGE_VERSION"
          
          depends_on "libarchive"
          depends_on "curl" 
          depends_on "gpgme"
          depends_on "openssl@3"
          depends_on "bash"
          depends_on "gettext"
          depends_on "meson" => :build
          depends_on "ninja" => :build
          depends_on "pkg-config" => :build
          
          def install
            # Ensure we use Homebrew bash and gettext
            ENV.prepend_path "PATH", Formula["bash"].opt_bin
            ENV.prepend_path "PKG_CONFIG_PATH", Formula["gettext"].opt_lib/"pkgconfig"
            ENV.prepend_path "PKG_CONFIG_PATH", Formula["openssl@3"].opt_lib/"pkgconfig"
            
            system "meson", "setup", "--prefix=#{prefix}", "build"
            system "ninja", "-C", "build"
            system "ninja", "-C", "build", "install"
          end
          
          test do
            system "#{bin}/pacman", "--version"
          end
        end
        EOF

    - name: Upload macOS packages
      uses: actions/upload-artifact@v4
      with:
        name: pacman-macos
        path: |
          *.pkg
          pacman.rb

  create-release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: [build-deb, build-tarball, build-macos]
    if: always() && (needs.build-deb.result == 'success' || needs.build-tarball.result == 'success' || needs.build-macos.result == 'success')
    steps:
    - name: Setup version
      run: |
        if [ "${{ github.event.inputs.package_version }}" = "auto" ]; then
          VERSION="auto-$(date +%Y%m%d-%H%M%S)"
        else
          VERSION="${{ github.event.inputs.package_version }}"
        fi
        echo "RELEASE_VERSION=$VERSION" >> $GITHUB_ENV

    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        path: artifacts/

    - name: Create Release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: v${{ env.RELEASE_VERSION }}
        name: "Pacman ${{ env.RELEASE_VERSION }}"
        draft: false
        prerelease: true
        files: |
          artifacts/**/*
        body: |
          ## Pacman Build ${{ env.RELEASE_VERSION }}
          
          Automated build of Pacman package manager.
          
          ### Packages
          - **DEB**: For Ubuntu/Debian systems
          - **PKG**: For macOS systems
          - **Source**: Source code tarball
          
          ### Installation
          
          **Ubuntu/Debian:**
          ```bash
          sudo dpkg -i pacman_*.deb
          sudo apt-get install -f  # Fix dependencies if needed
          ```
          
          **macOS:**
          ```bash
          # Option 1: Install .pkg file
          sudo installer -pkg pacman-*-macos.pkg -target /
          
          # Option 2: Install via Homebrew (copy pacman.rb to your tap)
          brew install --build-from-source ./pacman.rb
          ```
          
          **From Source:**
          ```bash
          tar -xzf pacman-*-source.tar.gz
          cd pacman-*
          meson setup build
          ninja -C build
          sudo ninja -C build install
          ```
